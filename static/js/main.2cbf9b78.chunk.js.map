{"version":3,"sources":["Book.js","SearchBooks.js","BookShelf.js","BookList.js","BooksAPI.js","App.js","index.js"],"names":["Book","props","react_default","a","createElement","key","book","id","className","style","width","height","backgroundImage","concat","imageLinks","thumbnail","onChange","event","onShelfChange","target","value","defaultValue","shelf","disabled","title","authors","SearchBooks","state","query","updateQuery","_this","setState","onSearch","clearQuery","clearSearchResults","_this2","this","_this$props","searchResults","react_router_dom","to","onClick","type","placeholder","length","map","src_Book","React","Component","BookShelf","books","BookList","src_BookShelf","filter","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","fetch","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","data","BooksApp","handleSearch","BooksAPI","booksSearched","ids","values","updatedBooks","includes","index","findIndex","catch","error","handleShelfChange","console","log","result","find","obj","prevState","react_router","exact","path","render","src_BookList","src_SearchBooks","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2cbf9b78.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction Book  (props) {  \n\treturn (\n\t\t    <li key={props.book.id}>\n            <div className=\"book\">\n              <div className=\"book-top\">\n                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${(props.book.imageLinks && props.book.imageLinks.thumbnail) || 'Thumbnail not available'})` }}></div>\n                <div className=\"book-shelf-changer\">\n                  <select onChange={(event)=> {props.onShelfChange(props.book, event.target.value)}} defaultValue={props.book.shelf}>\n                    <option value=\"move\" disabled>Move to...</option>\n                    <option value=\"currentlyReading\">Currently Reading</option>\n                    <option value=\"wantToRead\">Want to Read</option>\n                    <option value=\"read\">Read</option>\n                    <option value=\"none\">None</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"book-title\">{props.book.title}</div>\n              <div className=\"book-authors\">{(props.book.authors && props.book.authors[0]) || \"Author unknown\"}</div>\n            </div>\n         </li>\n\t)\n}\n\nexport default Book;","import React from 'react';\nimport './App.css'\nimport Book from './Book'\nimport { Link } from 'react-router-dom' \n\nclass SearchBooks extends React.Component{\n\n  state = {\n          \n          query: ''        \n  }  \n\n  updateQuery = (query) => {\n    this.setState(() => ({          \n           query        \n        }))\n    this.props.onSearch(query)        \n  }\n\n  clearQuery= () => {\n    this.props.clearSearchResults();\n  }\n\n\n\trender(){\n    const { query} = this.state\n    const{ onShelfChange ,  searchResults} =this.props\n\n\t\treturn(\t\t\t\n          <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n              <Link to='/' onClick={this.clearQuery} >\n                <button className=\"close-search\">Close</button>\n              </Link>\n              \n              <div className=\"search-books-input-wrapper\">\n              \n                {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n                <input type=\"text\" placeholder=\"Search by title or author\"\n                  value={query}\n                  onChange={(event) => this.updateQuery(event.target.value)}\n                />\n      \t\t\t\n              </div>\n            </div>\n            <div className=\"search-books-results\">\n              <ol className=\"books-grid\">                \n                {  searchResults.length > 0 ? searchResults.map((book) => <Book key={book.id} book={book} onShelfChange={onShelfChange}/>):  'No books found' }\n              </ol>\n            </div>\n          </div>        \t\n\t\t)\n\t}\n}\n\nexport default SearchBooks;","import React from 'react'\nimport Book from './Book'\n\nconst BookShelf = props => {\n\n\treturn(\n\n\t\t          <div>\n                <div className=\"bookshelf\">\n                  <h2 className=\"bookshelf-title\">{props.title}</h2>\n                  <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n\t                    {props.books.length > 0 && props.books.map((book) => <Book key={book.id} book={book} onShelfChange={props.onShelfChange}/>)}  \t                      \n                    </ol>\n                  </div>\n                </div>\n          </div>      \n\n\t\t)\n}\n\nexport default BookShelf;","import React from 'react';\nimport BookShelf from './BookShelf'\nimport { Link } from 'react-router-dom' \n\n\nclass BookList extends React.Component{     \n\n\trender(){\n      const { books, onShelfChange } = this.props\n\t\treturn(\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n\t            <div className=\"list-books-content\">\n\t\t            <BookShelf title='Currently Reading' books={books.filter((book) => book.shelf==='currentlyReading')} onShelfChange={onShelfChange}/>\n\t\t            <BookShelf title='Want to Read' books={ books.filter((book) => book.shelf==='wantToRead')} onShelfChange={onShelfChange}/>\n\t\t            <BookShelf title='Read' books={books.filter((book) => book.shelf==='read')} onShelfChange={onShelfChange}/>    \n\t\t        </div>             \n                \n            <div className=\"open-search\">\n               <Link \n                  to='/search'><button>Add a book</button>\n               </Link>              \n            </div>\n          </div>\n        )\t\n\t}\n}\n\nexport default BookList;\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\nimport { Route }from 'react-router-dom' \nimport './App.css'\nimport SeachBooks from './SearchBooks';\nimport BookList from './BookList';\nimport * as BooksAPI from './BooksAPI'\n\n\nclass BooksApp extends React.Component {\n\n  state = {\n    books: [],   \n    searchResults: []       \n  }\n\n  async componentDidMount() {\n    const books = await BooksAPI.getAll()\n    this.setState({ books })\n  }\n\n  handleSearch = (query) => {  \t\n\n  \tif(query.length > 0){\n  \t\t\n  \t\tBooksAPI.search(query)\n      \t.then((booksSearched) => {    \t\t\n      \t\t\n          const ids = Object.values(this.state.books).map(book => book.id)\n\n      \t\tconst updatedBooks = booksSearched.map((book) => {\n      \t\t\tif (ids.includes(book.id)) {\n              const index = ids.findIndex((id)=> book.id === id)              \n              book.shelf = this.state.books[index].shelf\n            }\n            else{\n              book.shelf = 'none'\n            }\n            return book\n      \t\t})\n\n          \tthis.setState(() => ({\n            searchResults: updatedBooks \n        }))\n        \n      \t}).catch(error =>{\n        this.setState(() => ({\n          searchResults: []\n        }))\n        \n      })\n  \t}else{\n  \t\tconst searchResults = []\n  \t\tthis.setState(() => ({\n          \t\tsearchResults: searchResults\n        \t}))\n  \t}\n  }\n\n  clearSearchResults = () =>{\n  \tthis.setState(() => ({\n          searchResults: []\n        }))\n  }\n\n  handleShelfChange = (book, shelf) => {\n      const books = this.state.books\n      console.log(book, shelf)\n      var result = books.find(obj => {\n         return obj.id === book.id\n      })\n      if(result){        \n        result.shelf = shelf\n        this.setState(() => ({\n          books: books\n        }))\n      }else{   \n        book.shelf = shelf                   \n        this.setState((prevState) => ({\n          books: prevState.books.concat([book])\n        }))\n      }      \n      \n      BooksAPI.update(book, shelf)\n   }\n\n  \n  \n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n            <BookList books={this.state.books} onShelfChange={this.handleShelfChange}/>\n          )\n         } \n        /> \n         <Route path='/search' render={() => (\n            <SeachBooks onShelfChange={this.handleShelfChange} onSearch={this.handleSearch} searchResults = {this.state.searchResults} clearSearchResults={this.clearSearchResults}/>\n          )\n         } \n        /> \n        \n       </div> \n    )\n  }\n}\n\nexport default BooksApp\n\n\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n\t<BrowserRouter>\t\n\t\t<App />\n\t</BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}